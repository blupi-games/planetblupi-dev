From 08579ba339a1bb94ea5483a6a10b30c4c0cde013 Mon Sep 17 00:00:00 2001
From: Mathieu Schroeter <mathieu@schroetersa.ch>
Date: Wed, 28 Jun 2023 22:13:51 +0200
Subject: Rename some functions in order to prevent clash with the linker


diff --git a/external/freetype/docs/oldlogs/ChangeLog.21 b/external/freetype/docs/oldlogs/ChangeLog.21
index e8a36ae..44f1b74 100644
--- a/external/freetype/docs/oldlogs/ChangeLog.21
+++ b/external/freetype/docs/oldlogs/ChangeLog.21
@@ -5825,7 +5825,7 @@
 	* src/gzip/ftgzip.c: C++ doesn't like that the array `inflate_mask'
 	is declared twice.  It is perhaps better to modify the zlib source
 	files directly instead of this hack.
-	(zcalloc, zfree, ft_gzip_stream_close, ft_gzip_stream_io): Add casts
+	(_zcalloc, zfree, ft_gzip_stream_close, ft_gzip_stream_io): Add casts
 	to make build with g++ successful.
 
 2003-04-24  Manish Singh  <yosh@gimp.org>
@@ -5919,7 +5919,7 @@
 
 2003-04-22  Werner Lemberg  <wl@gnu.org>
 
-	* src/gzip/ftgzip.c (zcalloc) [!FT_CONFIG_OPTION_SYSTEM_ZLIB]:
+	* src/gzip/ftgzip.c (_zcalloc) [!FT_CONFIG_OPTION_SYSTEM_ZLIB]:
 	Convert K&R format to modern C usage.
 	(FT_Stream_OpenGzip): Use long constant.
 
diff --git a/external/freetype/docs/oldlogs/ChangeLog.23 b/external/freetype/docs/oldlogs/ChangeLog.23
index d0792cb..80c0afb 100644
--- a/external/freetype/docs/oldlogs/ChangeLog.23
+++ b/external/freetype/docs/oldlogs/ChangeLog.23
@@ -1758,12 +1758,12 @@
 
 2009-07-31  suzuki toshiya  <mpsuzuki@hiroshima-u.ac.jp>
 
-	gzip: Use FT2 zcalloc() & zfree() in ftgzip.c by default.
+	gzip: Use FT2 _zcalloc() & zfree() in ftgzip.c by default.
 
-	* src/gzip/ftgzip.c (zcalloc, zcfree): Disable all
-	zcalloc() & zfree() by zlib in zutil.c, those in
+	* src/gzip/ftgzip.c (_zcalloc, _zcfree): Disable all
+	_zcalloc() & zfree() by zlib in zutil.c, those in
 	ftgzip.c by FT2 are enabled by default.  To use
-	zlib zcalloc() & zfree(), define USE_ZLIB_ZCALLOC.
+	zlib _zcalloc() & zfree(), define USE_ZLIB_ZCALLOC.
 	See discussion:
 	https://lists.gnu.org/archive/html/freetype-devel/2009-02/msg00000.html
 
@@ -1771,7 +1771,7 @@
 
 	gzip: Distinguish PureC from TurboC on MSDOS.
 
-	* src/gzip/zutil.c (zcalloc, zcfree): Enable only for
+	* src/gzip/zutil.c (_zcalloc, _zcfree): Enable only for
 	MSDOS platform.
 
 2009-07-31  suzuki toshiya  <mpsuzuki@hiroshima-u.ac.jp>
diff --git a/external/freetype/src/gzip/crc32.c b/external/freetype/src/gzip/crc32.c
index 2ddc32d..e232595 100644
--- a/external/freetype/src/gzip/crc32.c
+++ b/external/freetype/src/gzip/crc32.c
@@ -13,7 +13,7 @@
   Note on the use of DYNAMIC_CRC_TABLE: there is no mutex or semaphore
   protection on the static variables used to control the first-use generation
   of the crc tables. Therefore, if you #define DYNAMIC_CRC_TABLE, you should
-  first call get_crc_table() to initialize the tables before allowing more than
+  first call _get_crc_table() to initialize the tables before allowing more than
   one thread to use crc32().
 
   MAKECRCH can be #defined to write out crc32.h. A main() routine is also
@@ -160,7 +160,7 @@ local void make_crc_table OF((void));
 /*
   Define a once() function depending on the availability of atomics. If this is
   compiled with DYNAMIC_CRC_TABLE defined, and if CRCs will be computed in
-  multiple threads, and if atomics are not available, then get_crc_table() must
+  multiple threads, and if atomics are not available, then _get_crc_table() must
   be called to initialize the tables and must return before any threads are
   allowed to compute or combine CRCs.
  */
@@ -583,7 +583,7 @@ local z_crc_t x2nmodp(
  * This function can be used by asm versions of crc32(), and to force the
  * generation of the CRC tables in a threaded application.
  */
-const z_crc_t FAR * ZEXPORT get_crc_table()
+const z_crc_t FAR * ZEXPORT _get_crc_table()
 {
 #ifdef DYNAMIC_CRC_TABLE
     once(&made, make_crc_table);
@@ -610,7 +610,7 @@ const z_crc_t FAR * ZEXPORT get_crc_table()
 #define Z_BATCH_ZEROS 0xa10d3d0c    /* computed from Z_BATCH = 3990 */
 #define Z_BATCH_MIN 800             /* fewest words in a final batch */
 
-unsigned long ZEXPORT crc32_z(
+unsigned long ZEXPORT _crc32_z(
     unsigned long crc,
     const unsigned char FAR *buf,
     z_size_t len)
@@ -736,7 +736,7 @@ local z_word_t crc_word_big(
 #endif
 
 /* ========================================================================= */
-unsigned long ZEXPORT crc32_z(
+unsigned long ZEXPORT _crc32_z(
     unsigned long crc,
     const unsigned char FAR *buf,
     z_size_t len)
@@ -1065,11 +1065,11 @@ unsigned long ZEXPORT crc32(
     const unsigned char FAR *buf,
     uInt len)
 {
-    return crc32_z(crc, buf, len);
+    return _crc32_z(crc, buf, len);
 }
 
 /* ========================================================================= */
-uLong ZEXPORT crc32_combine64(
+uLong ZEXPORT _crc32_combine64(
     uLong crc1,
     uLong crc2,
     z_off64_t len2)
@@ -1081,16 +1081,16 @@ uLong ZEXPORT crc32_combine64(
 }
 
 /* ========================================================================= */
-uLong ZEXPORT crc32_combine(
+uLong ZEXPORT _crc32_combine(
     uLong crc1,
     uLong crc2,
     z_off_t len2)
 {
-    return crc32_combine64(crc1, crc2, len2);
+    return _crc32_combine64(crc1, crc2, len2);
 }
 
 /* ========================================================================= */
-uLong ZEXPORT crc32_combine_gen64(
+uLong ZEXPORT _crc32_combine_gen64(
     z_off64_t len2)
 {
 #ifdef DYNAMIC_CRC_TABLE
@@ -1100,14 +1100,14 @@ uLong ZEXPORT crc32_combine_gen64(
 }
 
 /* ========================================================================= */
-uLong ZEXPORT crc32_combine_gen(
+uLong ZEXPORT _crc32_combine_gen(
     z_off_t len2)
 {
-    return crc32_combine_gen64(len2);
+    return _crc32_combine_gen64(len2);
 }
 
 /* ========================================================================= */
-uLong crc32_combine_op(
+uLong _crc32_combine_op(
     uLong crc1,
     uLong crc2,
     uLong op)
diff --git a/external/freetype/src/gzip/ftgzip.c b/external/freetype/src/gzip/ftgzip.c
index ba9bb20..1184383 100644
--- a/external/freetype/src/gzip/ftgzip.c
+++ b/external/freetype/src/gzip/ftgzip.c
@@ -54,7 +54,7 @@
   /* original ZLib.                                                 */
 
 #ifndef USE_ZLIB_ZCALLOC
-#define MY_ZCALLOC /* prevent all zcalloc() & zfree() in zutil.c */
+#define MY_ZCALLOC /* prevent all _zcalloc() & zfree() in zutil.c */
 #endif
 
   /* Note that our `zlib.h' includes `ftzconf.h' instead of `zconf.h'; */
@@ -163,7 +163,7 @@
 #if !defined( FT_CONFIG_OPTION_SYSTEM_ZLIB ) && !defined( USE_ZLIB_ZCALLOC )
 
   voidpf ZLIB_INTERNAL
-  zcalloc ( voidpf    opaque,
+  _zcalloc ( voidpf    opaque,
             unsigned  items,
             unsigned  size )
   {
@@ -172,7 +172,7 @@
 
 
   void ZLIB_INTERNAL
-  zcfree( voidpf  opaque,
+  _zcfree( voidpf  opaque,
           voidpf  ptr )
   {
     ft_gzip_free( opaque, ptr );
diff --git a/external/freetype/src/gzip/ftzconf.h b/external/freetype/src/gzip/ftzconf.h
index 5e1d68a..de8261a 100644
--- a/external/freetype/src/gzip/ftzconf.h
+++ b/external/freetype/src/gzip/ftzconf.h
@@ -36,9 +36,9 @@
 #    define compressBound         z_compressBound
 #  endif
 #  define crc32                 z_crc32
-#  define crc32_combine         z_crc32_combine
-#  define crc32_combine64       z_crc32_combine64
-#  define crc32_z               z_crc32_z
+#  define _crc32_combine         z_crc32_combine
+#  define _crc32_combine64       z_crc32_combine64
+#  define _crc32_z               z_crc32_z
 #  define deflate               z_deflate
 #  define deflateBound          z_deflateBound
 #  define deflateCopy           z_deflateCopy
@@ -57,7 +57,7 @@
 #  define deflateSetHeader      z_deflateSetHeader
 #  define deflateTune           z_deflateTune
 #  define deflate_copyright     z_deflate_copyright
-#  define get_crc_table         z_get_crc_table
+#  define _get_crc_table         z_get_crc_table
 #  ifndef Z_SOLO
 #    define gz_error              z_gz_error
 #    define gz_intmax             z_gz_intmax
@@ -111,17 +111,17 @@
 #  define inflateInit           z_inflateInit
 #  define inflateInit2          z_inflateInit2
 #  define inflateInit2_         z_inflateInit2_
-#  define inflateInit_          z_inflateInit_
+#  define _inflateInit_          z_inflateInit_
 #  define inflateMark           z_inflateMark
 #  define inflatePrime          z_inflatePrime
 #  define inflateReset          z_inflateReset
 #  define inflateReset2         z_inflateReset2
-#  define inflateResetKeep      z_inflateResetKeep
+#  define _inflateResetKeep      z_inflateResetKeep
 #  define inflateSetDictionary  z_inflateSetDictionary
 #  define inflateSync           z_inflateSync
-#  define inflateSyncPoint      z_inflateSyncPoint
-#  define inflateUndermine      z_inflateUndermine
-#  define inflateValidate       z_inflateValidate
+#  define _inflateSyncPoint      z_inflateSyncPoint
+#  define _inflateUndermine      z_inflateUndermine
+#  define _inflateValidate       z_inflateValidate
 #  define inflate_copyright     z_inflate_copyright
 #  define inflate_fast          z_inflate_fast
 #  define inflate_table         z_inflate_table
@@ -129,13 +129,13 @@
 #    define uncompress            z_uncompress
 #    define uncompress2           z_uncompress2
 #  endif
-#  define zError                z_zError
+#  define _zError                z_zError
 #  ifndef Z_SOLO
-#    define zcalloc               z_zcalloc
-#    define zcfree                z_zcfree
+#    define _zcalloc               z_zcalloc
+#    define _zcfree                z_zcfree
 #  endif
-#  define zlibCompileFlags      z_zlibCompileFlags
-#  define zlibVersion           z_zlibVersion
+#  define _zlibCompileFlags      z_zlibCompileFlags
+#  define _zlibVersion           z_zlibVersion
 
 /* all zlib typedefs in zlib.h and zconf.h */
 #  define Byte                  z_Byte
@@ -520,7 +520,7 @@ typedef uLong FAR uLongf;
   #pragma map(deflateInit2_,"DEIN2")
   #pragma map(deflateEnd,"DEEND")
   #pragma map(deflateBound,"DEBND")
-  #pragma map(inflateInit_,"ININ")
+  #pragma map(_inflateInit_,"ININ")
   #pragma map(inflateInit2_,"ININ2")
   #pragma map(inflateEnd,"INEND")
   #pragma map(inflateSync,"INSY")
diff --git a/external/freetype/src/gzip/infback.c b/external/freetype/src/gzip/infback.c
index 5fb8c67..46f8f56 100644
--- a/external/freetype/src/gzip/infback.c
+++ b/external/freetype/src/gzip/infback.c
@@ -45,7 +45,7 @@ int ZEXPORT inflateBackInit_(
 #ifdef Z_SOLO
         return Z_STREAM_ERROR;
 #else
-        strm->zalloc = zcalloc;
+        strm->zalloc = _zcalloc;
         strm->opaque = (voidpf)0;
 #endif
     }
@@ -53,7 +53,7 @@ int ZEXPORT inflateBackInit_(
 #ifdef Z_SOLO
         return Z_STREAM_ERROR;
 #else
-    strm->zfree = zcfree;
+    strm->zfree = _zcfree;
 #endif
     state = (struct inflate_state FAR *)ZALLOC(strm, 1,
                                                sizeof(struct inflate_state));
diff --git a/external/freetype/src/gzip/inflate.c b/external/freetype/src/gzip/inflate.c
index 5bf5b81..3272064 100644
--- a/external/freetype/src/gzip/inflate.c
+++ b/external/freetype/src/gzip/inflate.c
@@ -118,7 +118,7 @@ local int inflateStateCheck(
     return 0;
 }
 
-int ZEXPORT inflateResetKeep(
+int ZEXPORT _inflateResetKeep(
     z_streamp strm)
 {
     struct inflate_state FAR *state;
@@ -154,7 +154,7 @@ int ZEXPORT inflateReset(
     state->wsize = 0;
     state->whave = 0;
     state->wnext = 0;
-    return inflateResetKeep(strm);
+    return _inflateResetKeep(strm);
 }
 
 int ZEXPORT inflateReset2(
@@ -213,7 +213,7 @@ int ZEXPORT inflateInit2_(
 #ifdef Z_SOLO
         return Z_STREAM_ERROR;
 #else
-        strm->zalloc = zcalloc;
+        strm->zalloc = _zcalloc;
         strm->opaque = (voidpf)0;
 #endif
     }
@@ -221,7 +221,7 @@ int ZEXPORT inflateInit2_(
 #ifdef Z_SOLO
         return Z_STREAM_ERROR;
 #else
-        strm->zfree = zcfree;
+        strm->zfree = _zcfree;
 #endif
     state = (struct inflate_state FAR *)
             ZALLOC(strm, 1, sizeof(struct inflate_state));
@@ -239,7 +239,7 @@ int ZEXPORT inflateInit2_(
     return ret;
 }
 
-int ZEXPORT inflateInit_(
+int ZEXPORT _inflateInit_(
     z_streamp strm,
     const char *version,
     int stream_size)
@@ -1489,7 +1489,7 @@ int ZEXPORT inflateSync(
    block. When decompressing, PPP checks that at the end of input packet,
    inflate is waiting for these length bytes.
  */
-int ZEXPORT inflateSyncPoint(
+int ZEXPORT _inflateSyncPoint(
     z_streamp strm)
 {
     struct inflate_state FAR *state;
@@ -1550,7 +1550,7 @@ int ZEXPORT inflateCopy(
 
 #endif  /* !Z_FREETYPE */
 
-int ZEXPORT inflateUndermine(
+int ZEXPORT _inflateUndermine(
     z_streamp strm,
     int subvert)
 {
@@ -1568,7 +1568,7 @@ int ZEXPORT inflateUndermine(
 #endif
 }
 
-int ZEXPORT inflateValidate(
+int ZEXPORT _inflateValidate(
     z_streamp strm,
     int check)
 {
diff --git a/external/freetype/src/gzip/patches/freetype-zlib.diff b/external/freetype/src/gzip/patches/freetype-zlib.diff
index 20d8429..80f2a4d 100644
--- a/external/freetype/src/gzip/patches/freetype-zlib.diff
+++ b/external/freetype/src/gzip/patches/freetype-zlib.diff
@@ -80,7 +80,7 @@ index 4375557b4..5bf5b815e 100644
  
  local int inflateStateCheck(
      z_streamp strm)
-@@ -245,6 +247,8 @@ int ZEXPORT inflateInit_(
+@@ -245,6 +247,8 @@ int ZEXPORT _inflateInit_(
      return inflateInit2_(strm, DEF_WBITS, version, stream_size);
  }
  
@@ -116,7 +116,7 @@ index 4375557b4..5bf5b815e 100644
  /*
     Returns true if inflate is currently at the end of a block generated by
     Z_SYNC_FLUSH or Z_FULL_FLUSH. This function is used by one PPP
-@@ -1489,6 +1499,8 @@ int ZEXPORT inflateSyncPoint(
+@@ -1489,6 +1499,8 @@ int ZEXPORT _inflateSyncPoint(
      return state->mode == STORED && state->bits == 0;
  }
  
@@ -131,10 +131,10 @@ index 4375557b4..5bf5b815e 100644
  
 +#endif  /* !Z_FREETYPE */
 +
- int ZEXPORT inflateUndermine(
+ int ZEXPORT _inflateUndermine(
      z_streamp strm,
      int subvert)
-@@ -1569,6 +1583,8 @@ int ZEXPORT inflateValidate(
+@@ -1569,6 +1583,8 @@ int ZEXPORT _inflateValidate(
      return Z_OK;
  }
  
@@ -208,7 +208,7 @@ index 4a98e38bf..d760140c2 100644
  
 +#ifndef Z_FREETYPE
 +
- #define zlib_version zlibVersion()
+ #define zlib_version _zlibVersion()
  /* for compatibility with versions < 1.0.2 */
  
 @@ -246,7 +248,6 @@ ZEXTERN int ZEXPORT deflateInit OF((z_streamp strm, int level));
@@ -272,7 +272,7 @@ index 4a98e38bf..d760140c2 100644
  ZEXTERN int ZEXPORT inflateBack OF((z_streamp strm,
                                      in_func in, void FAR *in_desc,
                                      out_func out, void FAR *out_desc));
-@@ -1214,6 +1226,8 @@ ZEXTERN uLong ZEXPORT zlibCompileFlags OF((void));
+@@ -1214,6 +1226,8 @@ ZEXTERN uLong ZEXPORT _zlibCompileFlags OF((void));
       27-31: 0 (reserved)
   */
  
@@ -287,7 +287,7 @@ index 4a98e38bf..d760140c2 100644
  
 +#ifndef Z_FREETYPE
 +
- ZEXTERN uLong ZEXPORT crc32_z OF((uLong crc, const Bytef *buf,
+ ZEXTERN uLong ZEXPORT _crc32_z OF((uLong crc, const Bytef *buf,
                                    z_size_t len));
  /*
 @@ -1822,6 +1838,19 @@ ZEXTERN int ZEXPORT inflateBackInit_ OF((z_streamp strm, int windowBits,
@@ -316,17 +316,17 @@ index 4a98e38bf..d760140c2 100644
  
 +#ifndef Z_FREETYPE
     ZEXTERN uLong ZEXPORT adler32_combine OF((uLong, uLong, z_off_t));
-    ZEXTERN uLong ZEXPORT crc32_combine OF((uLong, uLong, z_off_t));
-    ZEXTERN uLong ZEXPORT crc32_combine_gen OF((z_off_t));
+    ZEXTERN uLong ZEXPORT _crc32_combine OF((uLong, uLong, z_off_t));
+    ZEXTERN uLong ZEXPORT _crc32_combine_gen OF((z_off_t));
 +#endif
  
  #endif /* !Z_SOLO */
  
  /* undocumented functions */
 +#ifndef Z_FREETYPE
- ZEXTERN const char   * ZEXPORT zError           OF((int));
- ZEXTERN int            ZEXPORT inflateSyncPoint OF((z_streamp));
- ZEXTERN const z_crc_t FAR * ZEXPORT get_crc_table    OF((void));
+ ZEXTERN const char   * ZEXPORT _zError           OF((int));
+ ZEXTERN int            ZEXPORT _inflateSyncPoint OF((z_streamp));
+ ZEXTERN const z_crc_t FAR * ZEXPORT _get_crc_table    OF((void));
 @@ -1927,6 +1959,7 @@ ZEXTERN int            ZEXPORTVA gzvprintf Z_ARG((gzFile file,
                                                    va_list va));
  #  endif
@@ -339,7 +339,7 @@ diff --git a/src/gzip/zutil.h b/src/gzip/zutil.h
 index d9a20ae1b..14f0f1a85 100644
 --- a/src/gzip/zutil.h
 +++ b/src/gzip/zutil.h
-@@ -188,6 +188,8 @@ extern z_const char * const z_errmsg[10]; /* indexed by 2-zlib_error */
+@@ -188,6 +188,8 @@ extern z_const char * const _z_errmsg[10]; /* indexed by 2-zlib_error */
    #pragma warn -8066
  #endif
  
@@ -348,8 +348,8 @@ index d9a20ae1b..14f0f1a85 100644
  /* provide prototypes for these when building zlib without LFS */
  #if !defined(_WIN32) && \
      (!defined(_LARGEFILE64_SOURCE) || _LFS64_LARGEFILE-0 == 0)
-@@ -195,6 +197,8 @@ extern z_const char * const z_errmsg[10]; /* indexed by 2-zlib_error */
-     ZEXTERN uLong ZEXPORT crc32_combine64 OF((uLong, uLong, z_off_t));
+@@ -195,6 +197,8 @@ extern z_const char * const _z_errmsg[10]; /* indexed by 2-zlib_error */
+     ZEXTERN uLong ZEXPORT _crc32_combine64 OF((uLong, uLong, z_off_t));
  #endif
  
 +#endif  /* !Z_FREETYPE */
@@ -357,7 +357,7 @@ index d9a20ae1b..14f0f1a85 100644
          /* common defaults */
  
  #ifndef OS_CODE
-@@ -226,9 +230,9 @@ extern z_const char * const z_errmsg[10]; /* indexed by 2-zlib_error */
+@@ -226,9 +230,9 @@ extern z_const char * const _z_errmsg[10]; /* indexed by 2-zlib_error */
  #    define zmemcmp _fmemcmp
  #    define zmemzero(dest, len) _fmemset(dest, 0, len)
  #  else
diff --git a/external/freetype/src/gzip/zlib.h b/external/freetype/src/gzip/zlib.h
index d760140..7cf6d05 100644
--- a/external/freetype/src/gzip/zlib.h
+++ b/external/freetype/src/gzip/zlib.h
@@ -213,14 +213,14 @@ typedef gz_header FAR *gz_headerp;
 
 #ifndef Z_FREETYPE
 
-#define zlib_version zlibVersion()
+#define zlib_version _zlibVersion()
 /* for compatibility with versions < 1.0.2 */
 
 
                         /* basic functions */
 
-ZEXTERN const char * ZEXPORT zlibVersion OF((void));
-/* The application can compare zlibVersion and ZLIB_VERSION for consistency.
+ZEXTERN const char * ZEXPORT _zlibVersion OF((void));
+/* The application can compare _zlibVersion and ZLIB_VERSION for consistency.
    If the first character differs, the library code actually used is not
    compatible with the zlib.h header file used by the application.  This check
    is automatically made by deflateInit and inflateInit.
@@ -1185,7 +1185,7 @@ ZEXTERN int ZEXPORT inflateBackEnd OF((z_streamp strm));
    state was inconsistent.
 */
 
-ZEXTERN uLong ZEXPORT zlibCompileFlags OF((void));
+ZEXTERN uLong ZEXPORT _zlibCompileFlags OF((void));
 /* Return flags indicating compile-time options.
 
     Type sizes, two bits each, 00 = 16 bits, 01 = 32, 10 = 64, 11 = other:
@@ -1491,7 +1491,7 @@ ZEXTERN int ZEXPORTVA gzprintf Z_ARG((gzFile file, const char *format, ...));
    buffer overflow with unpredictable consequences, which is possible only if
    zlib was compiled with the insecure functions sprintf() or vsprintf(),
    because the secure snprintf() or vsnprintf() functions were not available.
-   This can be determined using zlibCompileFlags().
+   This can be determined using _zlibCompileFlags().
 */
 
 ZEXTERN int ZEXPORT gzputs OF((gzFile file, const char *s));
@@ -1758,34 +1758,34 @@ ZEXTERN uLong ZEXPORT crc32 OF((uLong crc, const Bytef *buf, uInt len));
 
 #ifndef Z_FREETYPE
 
-ZEXTERN uLong ZEXPORT crc32_z OF((uLong crc, const Bytef *buf,
+ZEXTERN uLong ZEXPORT _crc32_z OF((uLong crc, const Bytef *buf,
                                   z_size_t len));
 /*
      Same as crc32(), but with a size_t length.
 */
 
 /*
-ZEXTERN uLong ZEXPORT crc32_combine OF((uLong crc1, uLong crc2, z_off_t len2));
+ZEXTERN uLong ZEXPORT _crc32_combine OF((uLong crc1, uLong crc2, z_off_t len2));
 
      Combine two CRC-32 check values into one.  For two sequences of bytes,
    seq1 and seq2 with lengths len1 and len2, CRC-32 check values were
-   calculated for each, crc1 and crc2.  crc32_combine() returns the CRC-32
+   calculated for each, crc1 and crc2.  _crc32_combine() returns the CRC-32
    check value of seq1 and seq2 concatenated, requiring only crc1, crc2, and
    len2.
 */
 
 /*
-ZEXTERN uLong ZEXPORT crc32_combine_gen OF((z_off_t len2));
+ZEXTERN uLong ZEXPORT _crc32_combine_gen OF((z_off_t len2));
 
      Return the operator corresponding to length len2, to be used with
-   crc32_combine_op().
+   _crc32_combine_op().
 */
 
-ZEXTERN uLong ZEXPORT crc32_combine_op OF((uLong crc1, uLong crc2, uLong op));
+ZEXTERN uLong ZEXPORT _crc32_combine_op OF((uLong crc1, uLong crc2, uLong op));
 /*
-     Give the same result as crc32_combine(), using op in place of len2. op is
-   is generated from len2 by crc32_combine_gen(). This will be faster than
-   crc32_combine() if the generated op is used more than once.
+     Give the same result as _crc32_combine(), using op in place of len2. op is
+   is generated from len2 by _crc32_combine_gen(). This will be faster than
+   _crc32_combine() if the generated op is used more than once.
 */
 
 
@@ -1796,7 +1796,7 @@ ZEXTERN uLong ZEXPORT crc32_combine_op OF((uLong crc1, uLong crc2, uLong op));
  */
 ZEXTERN int ZEXPORT deflateInit_ OF((z_streamp strm, int level,
                                      const char *version, int stream_size));
-ZEXTERN int ZEXPORT inflateInit_ OF((z_streamp strm,
+ZEXTERN int ZEXPORT _inflateInit_ OF((z_streamp strm,
                                      const char *version, int stream_size));
 ZEXTERN int ZEXPORT deflateInit2_ OF((z_streamp strm, int  level, int  method,
                                       int windowBits, int memLevel,
@@ -1812,7 +1812,7 @@ ZEXTERN int ZEXPORT inflateBackInit_ OF((z_streamp strm, int windowBits,
 #  define z_deflateInit(strm, level) \
           deflateInit_((strm), (level), ZLIB_VERSION, (int)sizeof(z_stream))
 #  define z_inflateInit(strm) \
-          inflateInit_((strm), ZLIB_VERSION, (int)sizeof(z_stream))
+          _inflateInit_((strm), ZLIB_VERSION, (int)sizeof(z_stream))
 #  define z_deflateInit2(strm, level, method, windowBits, memLevel, strategy) \
           deflateInit2_((strm),(level),(method),(windowBits),(memLevel),\
                         (strategy), ZLIB_VERSION, (int)sizeof(z_stream))
@@ -1826,7 +1826,7 @@ ZEXTERN int ZEXPORT inflateBackInit_ OF((z_streamp strm, int windowBits,
 #  define deflateInit(strm, level) \
           deflateInit_((strm), (level), ZLIB_VERSION, (int)sizeof(z_stream))
 #  define inflateInit(strm) \
-          inflateInit_((strm), ZLIB_VERSION, (int)sizeof(z_stream))
+          _inflateInit_((strm), ZLIB_VERSION, (int)sizeof(z_stream))
 #  define deflateInit2(strm, level, method, windowBits, memLevel, strategy) \
           deflateInit2_((strm),(level),(method),(windowBits),(memLevel),\
                         (strategy), ZLIB_VERSION, (int)sizeof(z_stream))
@@ -1887,8 +1887,8 @@ ZEXTERN int ZEXPORT gzgetc_ OF((gzFile file));  /* backward compatibility */
    ZEXTERN z_off64_t ZEXPORT gztell64 OF((gzFile));
    ZEXTERN z_off64_t ZEXPORT gzoffset64 OF((gzFile));
    ZEXTERN uLong ZEXPORT adler32_combine64 OF((uLong, uLong, z_off64_t));
-   ZEXTERN uLong ZEXPORT crc32_combine64 OF((uLong, uLong, z_off64_t));
-   ZEXTERN uLong ZEXPORT crc32_combine_gen64 OF((z_off64_t));
+   ZEXTERN uLong ZEXPORT _crc32_combine64 OF((uLong, uLong, z_off64_t));
+   ZEXTERN uLong ZEXPORT _crc32_combine_gen64 OF((z_off64_t));
 #endif
 
 #if !defined(ZLIB_INTERNAL) && defined(Z_WANT64)
@@ -1906,8 +1906,8 @@ ZEXTERN int ZEXPORT gzgetc_ OF((gzFile file));  /* backward compatibility */
 #    define gztell gztell64
 #    define gzoffset gzoffset64
 #    define adler32_combine adler32_combine64
-#    define crc32_combine crc32_combine64
-#    define crc32_combine_gen crc32_combine_gen64
+#    define _crc32_combine _crc32_combine64
+#    define _crc32_combine_gen _crc32_combine_gen64
 #  endif
 #  ifndef Z_LARGE64
      ZEXTERN gzFile ZEXPORT gzopen64 OF((const char *, const char *));
@@ -1915,8 +1915,8 @@ ZEXTERN int ZEXPORT gzgetc_ OF((gzFile file));  /* backward compatibility */
      ZEXTERN z_off_t ZEXPORT gztell64 OF((gzFile));
      ZEXTERN z_off_t ZEXPORT gzoffset64 OF((gzFile));
      ZEXTERN uLong ZEXPORT adler32_combine64 OF((uLong, uLong, z_off_t));
-     ZEXTERN uLong ZEXPORT crc32_combine64 OF((uLong, uLong, z_off_t));
-     ZEXTERN uLong ZEXPORT crc32_combine_gen64 OF((z_off_t));
+     ZEXTERN uLong ZEXPORT _crc32_combine64 OF((uLong, uLong, z_off_t));
+     ZEXTERN uLong ZEXPORT _crc32_combine_gen64 OF((z_off_t));
 #  endif
 #else
    ZEXTERN gzFile ZEXPORT gzopen OF((const char *, const char *));
@@ -1924,29 +1924,29 @@ ZEXTERN int ZEXPORT gzgetc_ OF((gzFile file));  /* backward compatibility */
    ZEXTERN z_off_t ZEXPORT gztell OF((gzFile));
    ZEXTERN z_off_t ZEXPORT gzoffset OF((gzFile));
    ZEXTERN uLong ZEXPORT adler32_combine OF((uLong, uLong, z_off_t));
-   ZEXTERN uLong ZEXPORT crc32_combine OF((uLong, uLong, z_off_t));
-   ZEXTERN uLong ZEXPORT crc32_combine_gen OF((z_off_t));
+   ZEXTERN uLong ZEXPORT _crc32_combine OF((uLong, uLong, z_off_t));
+   ZEXTERN uLong ZEXPORT _crc32_combine_gen OF((z_off_t));
 #endif
 
 #else /* Z_SOLO */
 
 #ifndef Z_FREETYPE
    ZEXTERN uLong ZEXPORT adler32_combine OF((uLong, uLong, z_off_t));
-   ZEXTERN uLong ZEXPORT crc32_combine OF((uLong, uLong, z_off_t));
-   ZEXTERN uLong ZEXPORT crc32_combine_gen OF((z_off_t));
+   ZEXTERN uLong ZEXPORT _crc32_combine OF((uLong, uLong, z_off_t));
+   ZEXTERN uLong ZEXPORT _crc32_combine_gen OF((z_off_t));
 #endif
 
 #endif /* !Z_SOLO */
 
 /* undocumented functions */
 #ifndef Z_FREETYPE
-ZEXTERN const char   * ZEXPORT zError           OF((int));
-ZEXTERN int            ZEXPORT inflateSyncPoint OF((z_streamp));
-ZEXTERN const z_crc_t FAR * ZEXPORT get_crc_table    OF((void));
-ZEXTERN int            ZEXPORT inflateUndermine OF((z_streamp, int));
-ZEXTERN int            ZEXPORT inflateValidate OF((z_streamp, int));
+ZEXTERN const char   * ZEXPORT _zError           OF((int));
+ZEXTERN int            ZEXPORT _inflateSyncPoint OF((z_streamp));
+ZEXTERN const z_crc_t FAR * ZEXPORT _get_crc_table    OF((void));
+ZEXTERN int            ZEXPORT _inflateUndermine OF((z_streamp, int));
+ZEXTERN int            ZEXPORT _inflateValidate OF((z_streamp, int));
 ZEXTERN unsigned long  ZEXPORT inflateCodesUsed OF ((z_streamp));
-ZEXTERN int            ZEXPORT inflateResetKeep OF((z_streamp));
+ZEXTERN int            ZEXPORT _inflateResetKeep OF((z_streamp));
 ZEXTERN int            ZEXPORT deflateResetKeep OF((z_streamp));
 #if defined(_WIN32) && !defined(Z_SOLO)
 ZEXTERN gzFile         ZEXPORT gzopen_w OF((const wchar_t *path,
diff --git a/external/freetype/src/gzip/zutil.c b/external/freetype/src/gzip/zutil.c
index a19ac2b..669eb21 100644
--- a/external/freetype/src/gzip/zutil.c
+++ b/external/freetype/src/gzip/zutil.c
@@ -10,7 +10,7 @@
 #  include "gzguts.h"
 #endif
 
-z_const char * const z_errmsg[10] = {
+z_const char * const _z_errmsg[10] = {
     (z_const char *)"need dictionary",     /* Z_NEED_DICT       2  */
     (z_const char *)"stream end",          /* Z_STREAM_END      1  */
     (z_const char *)"",                    /* Z_OK              0  */
@@ -24,12 +24,12 @@ z_const char * const z_errmsg[10] = {
 };
 
 
-const char * ZEXPORT zlibVersion()
+const char * ZEXPORT _zlibVersion()
 {
     return ZLIB_VERSION;
 }
 
-uLong ZEXPORT zlibCompileFlags()
+uLong ZEXPORT _zlibCompileFlags()
 {
     uLong flags;
 
@@ -130,7 +130,7 @@ void ZLIB_INTERNAL z_error (
 /* exported to allow conversion of error code to string for compress() and
  * uncompress()
  */
-const char * ZEXPORT zError(
+const char * ZEXPORT _zError(
     int err)
 {
     return ERR_MSG(err);
@@ -193,7 +193,7 @@ void ZLIB_INTERNAL zmemzero(
 /* Turbo C malloc() does not allow dynamic allocation of 64K bytes
  * and farmalloc(64K) returns a pointer with an offset of 8, so we
  * must fix the pointer. Warning: the pointer must be put back to its
- * original form in order to free it, use zcfree().
+ * original form in order to free it, use _zcfree().
  */
 
 #define MAX_PTR 10
@@ -214,7 +214,7 @@ local ptr_table table[MAX_PTR];
  * a protected system like OS/2. Use Microsoft C instead.
  */
 
-voidpf ZLIB_INTERNAL zcalloc (voidpf opaque, unsigned items, unsigned size)
+voidpf ZLIB_INTERNAL _zcalloc (voidpf opaque, unsigned items, unsigned size)
 {
     voidpf buf;
     ulg bsize = (ulg)items*size;
@@ -240,7 +240,7 @@ voidpf ZLIB_INTERNAL zcalloc (voidpf opaque, unsigned items, unsigned size)
     return buf;
 }
 
-void ZLIB_INTERNAL zcfree (voidpf opaque, voidpf ptr)
+void ZLIB_INTERNAL _zcfree (voidpf opaque, voidpf ptr)
 {
     int n;
 
@@ -261,7 +261,7 @@ void ZLIB_INTERNAL zcfree (voidpf opaque, voidpf ptr)
         next_ptr--;
         return;
     }
-    Assert(0, "zcfree: ptr not found");
+    Assert(0, "_zcfree: ptr not found");
 }
 
 #endif /* __TURBOC__ */
@@ -277,13 +277,13 @@ void ZLIB_INTERNAL zcfree (voidpf opaque, voidpf ptr)
 #  define _hfree   hfree
 #endif
 
-voidpf ZLIB_INTERNAL zcalloc (voidpf opaque, uInt items, uInt size)
+voidpf ZLIB_INTERNAL _zcalloc (voidpf opaque, uInt items, uInt size)
 {
     (void)opaque;
     return _halloc((long)items, size);
 }
 
-void ZLIB_INTERNAL zcfree (voidpf opaque, voidpf ptr)
+void ZLIB_INTERNAL _zcfree (voidpf opaque, voidpf ptr)
 {
     (void)opaque;
     _hfree(ptr);
@@ -302,7 +302,7 @@ extern voidp  calloc OF((uInt items, uInt size));
 extern void   free   OF((voidpf ptr));
 #endif
 
-voidpf ZLIB_INTERNAL zcalloc (
+voidpf ZLIB_INTERNAL _zcalloc (
     voidpf opaque,
     unsigned items,
     unsigned size)
@@ -312,7 +312,7 @@ voidpf ZLIB_INTERNAL zcalloc (
                               (voidpf)calloc(items, size);
 }
 
-void ZLIB_INTERNAL zcfree (
+void ZLIB_INTERNAL _zcfree (
     voidpf opaque,
     voidpf ptr)
 {
diff --git a/external/freetype/src/gzip/zutil.h b/external/freetype/src/gzip/zutil.h
index 14f0f1a..b8bd839 100644
--- a/external/freetype/src/gzip/zutil.h
+++ b/external/freetype/src/gzip/zutil.h
@@ -53,10 +53,10 @@ typedef unsigned long  ulg;
 #  endif
 #endif
 
-extern z_const char * const z_errmsg[10]; /* indexed by 2-zlib_error */
+extern z_const char * const _z_errmsg[10]; /* indexed by 2-zlib_error */
 /* (size given to avoid silly warnings with Visual C++) */
 
-#define ERR_MSG(err) z_errmsg[Z_NEED_DICT-(err)]
+#define ERR_MSG(err) _z_errmsg[Z_NEED_DICT-(err)]
 
 #define ERR_RETURN(strm,err) \
   return (strm->msg = ERR_MSG(err), (err))
@@ -194,7 +194,7 @@ extern z_const char * const z_errmsg[10]; /* indexed by 2-zlib_error */
 #if !defined(_WIN32) && \
     (!defined(_LARGEFILE64_SOURCE) || _LFS64_LARGEFILE-0 == 0)
     ZEXTERN uLong ZEXPORT adler32_combine64 OF((uLong, uLong, z_off_t));
-    ZEXTERN uLong ZEXPORT crc32_combine64 OF((uLong, uLong, z_off_t));
+    ZEXTERN uLong ZEXPORT _crc32_combine64 OF((uLong, uLong, z_off_t));
 #endif
 
 #endif  /* !Z_FREETYPE */
@@ -261,9 +261,9 @@ extern z_const char * const z_errmsg[10]; /* indexed by 2-zlib_error */
 #endif
 
 #ifndef Z_SOLO
-   voidpf ZLIB_INTERNAL zcalloc OF((voidpf opaque, unsigned items,
+   voidpf ZLIB_INTERNAL _zcalloc OF((voidpf opaque, unsigned items,
                                     unsigned size));
-   void ZLIB_INTERNAL zcfree  OF((voidpf opaque, voidpf ptr));
+   void ZLIB_INTERNAL _zcfree  OF((voidpf opaque, voidpf ptr));
 #endif
 
 #define ZALLOC(strm, items, size) \
